{"version":3,"sources":["login.svg","asset/plantBanner.jpg","components/auth/JumboUserCard.js","modules/UserManager.js","components/auth/JumboUserList.js","components/nav/Jumbotron.js","components/nav/NavBar.js","components/auth/UserCard.js","components/auth/UserList.js","modules/PlantManager.js","modules/ImageManager.js","components/plant/PlantJournalCard.js","components/plant/ImageCard.js","components/plant/PlantCard.js","components/plant/PlantList.js","components/home/Home.js","components/plant/GraveYardCard.js","components/plant/PlantGraveYardList.js","components/home/GraveYard.js","components/auth/Login.jsx","components/auth/Register.jsx","components/auth/CustomLogin.jsx","components/auth/UserEditForm.js","components/plant/PlantForm.js","components/plant/PlantDetail.js","components/plant/PlantEditForm.js","components/plant/PlantJournalForm.js","components/plant/PlantJournalDetail.js","components/plant/PlantJournalEditForm.js","components/plant/ImageForm.js","components/ApplicationViews.js","PlantBaby.js","serviceWorker.js","index.js"],"names":["module","exports","JumboUserCard","props","currentUser","parseInt","sessionStorage","getItem","user","userId","className","Image","src","remoteURL","id","fetch","then","result","json","editedUser","method","headers","body","JSON","stringify","data","newUser","JumboUserList","useState","setUser","useEffect","UserManager","userFromAPI","getUser","key","name","Styles","styled","div","plantBanner","Jumbotron","fluid","Container","withRouter","Navbar","expand","Brand","href","hasUser","onClick","clearUser","history","push","to","Toggle","aria-controls","Collapse","Nav","Item","Link","UserCard","liveCountz","setLiveCountz","deadCountz","setDeadCountz","console","log","countFromAPI","LiveCount","filter","officialCountAPI","isDead","DeadCount","bio","length","ClassName","UserList","getAll","str","getPlant","deletePlant","post","newPlant","updatePlant","editedPlant","getWithDetails","getWithSingleDetails","getWithAllDetails","getWithJournal","getWithSpecificPlants","getWithSpecificJournals","getJournal","deleteJournal","postJournal","newJournalEntry","update","editedJournal","newImage","PlantJournalCard","journalEntry","journalTitle","entryDate","type","ImageCard","imageEntry","url","rounded","PlantCard","journals","setJournals","images","setImages","plant","nickName","vernacularName","age","indoorOutdoor","moodId","MoodId","sunlightLevelId","waterLevelId","setIsLoading","isFlipped","setIsFlipped","handleClick","timeStamp","Intl","DateTimeFormat","timeStyle","dateStyle","PlantManager","APIres","ImageManager","plantId","cardZIndex","flipDirection","data-toggle","checked","onChange","evt","isDeadz","graveYardPlant","format","Date","now","window","location","reload","alt","sunlightLevel","level","waterLevel","mood","map","image","journal","PlantList","plants","setPlants","search","setSearch","filteredPlants","setFilteredPlants","delete","plantsfromAPI","sort","x","y","a","toLowerCase","includes","class","required","placeholder","target","value","Home","GraveYardCard","PlantGraveYardList","GraveYard","Login","password","credentials","setCredentials","handleFieldChange","stateToChange","ref","containerRef","loginImg","htmlFor","loginAccepted","users","find","setItem","alert","Register","email","img","onSubmit","preventDefault","userName","CustomLogin","rightSide","setHasUser","current","currentActive","classList","add","remove","bind","RightSide","UserEditForm","isLoading","match","params","disabled","editedUserz","PlantForm","setPlant","moods","setMoods","sunlightLevels","setSunlightLevels","waterLevels","setWaterLevels","moodsfromAPI","sunlightLevelsfromAPI","waterLevelsfromAPI","currentUserId","for","Form","Group","Label","Control","as","controlId","PlantDetail","setMood","setSunlightLevel","setWaterLevel","PlantEditForm","go","PlantJournalForm","setJournal","plantsFromAPI","data-length","journalId","CardDeck","style","float","padding","display","justifycontent","fontFamily","Card","border","width","margin","Body","Title","color","Text","Footer","PlantJournalEditForm","EntryDate","ImageForm","imageTitle","setImage","setImportImage","importTheImage","files","formData","FormData","append","res","file","secure_url","lassName","ApplicationViews","Fragment","exact","path","render","PlantJournalDetail","PlantBaby","isAuthenticated","clear","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d2a4cf14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login.8cc1a2a2.svg\";","module.exports = __webpack_public_path__ + \"static/media/plantBanner.d7ed901f.jpg\";","import React from \"react\";\nimport Image from 'react-bootstrap/Image'\n\n\n\n\n\n\nconst JumboUserCard = props => {\n\n    const currentUser = parseInt(sessionStorage.getItem(\"activeUser\"))\n\n    if (props.user.userId = currentUser) {\n\n\n        return (\n            <>\n\n\n\n                <div className=\"LOGOposition1\">\n                    <h1> Welcome, {props.user.user} </h1>\n                    <h2>...To Your Personal Plant & Track Assistant</h2>\n                </div>\n            </>\n        );\n    }\n    else {\n        return (\n            <div className=\"LOGOposition2\">\n                <h2>\n                    <picture>\n                        <Image src=\"https://res.cloudinary.com/triggsumms/image/upload/v1597683570/CapstoneSumms/xody0zneudiatcdngtcc.png\" className=\"plantLogo\" />\n                    </picture>\n                </h2>\n            </div>\n        )\n    }\n}\n\nexport default JumboUserCard;","const remoteURL = \"http://localhost:5005\"\n\n\nexport default {\n    getUser(id) {\n        return fetch(`${remoteURL}/users/${id}`).then(result => result.json())\n    },\n    getAllUsers() {\n        return fetch(`${remoteURL}/users`).then(result => result.json())\n    },\n    updateSpecificUser(editedUser) {\n        return fetch(`${remoteURL}/users/${editedUser.id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(editedUser)\n        }).then(data => data.json());\n    },\n    createUser(newUser) {\n        return fetch(`${remoteURL}/users`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newUser)\n        })\n    },\n\n    getTheCount(id) {\n        return fetch(`${remoteURL}/plants/?userId=${id}&_expand=user`).then(result => result.json())\n    }\n\n};\n","\nimport React, { useState, useEffect } from 'react';\nimport JumboUserCard from './JumboUserCard';\nimport UserManager from '../../modules/UserManager';\n\n\n\n\n\n\nconst JumboUserList = (props) => {\n  // The initial state is an empty array\n  const [user, setUser] = useState([]);\n  const id = sessionStorage.getItem(\"activeUser\")\n  const getUser = (id) => {\n    return UserManager.getUser(id).then(userFromAPI => {\n      setUser(userFromAPI)\n    });\n  };\n\n  // got the users from the API on the component's first render\n  useEffect(() => {\n    getUser(id);\n  }, []);\n\n\n  return (\n    <div>\n      <JumboUserCard\n        key={user.id}\n        user={user}\n        name={user.name}\n        id={user.id}\n        {...props}\n      />\n    </div>\n\n  );\n};\nexport default JumboUserList;","import React from 'react';\nimport { Jumbotron as Jumbo, Container } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport plantBanner from '../../asset/plantBanner.jpg';\nimport JumboUserList from \"../auth//JumboUserList\"\n\n\nconst Styles = styled.div`\n  .jumbo {\n    background: url(${plantBanner}) no-repeat fixed bottom;\n    background-size: cover;\n    color: #CAD2C5;\n    height: 300px;\n    position: relative;\n    z-index: -2;\n    margin: 0px;\n  }\n  .overlay {\n    background-color: #000;\n    opacity: 0.6;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    z-index: -1;\n  }\n`;\n\n\n\nexport const Jumbotron = () => (\n\n  <Styles>\n    <Jumbo fluid className=\"jumbo\">\n      <div className=\"overlay\"></div>\n      <Container>\n        <h1><JumboUserList /></h1>\n\n      </Container>\n    </Jumbo>\n  </Styles>\n)\n\n\n\nexport default Jumbotron;","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Nav, Navbar, NavDropdown, Form, FormControl, Button } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport Jumbotron from \"./Jumbotron\";\n\n\n\nconst Styles = styled.div`\n  .navbar {\n    background-color: #CAD2C5  ;\n    font-family: 'Crimson Text', serif;\n    font-size:20px;\n    padding-left: 25px;\n  }\n  a, .navbar-brand, .navbar-nav .nav-link {\n    color: #2F3E46;\n    font-family: 'Crimson Text', serif;\n    padding-left: 20px;\n    &:hover {\n      color: #84A98C;\n    }\n    .PLANTCOLLECTION {\n        color: inherit;\n        text-shadow: 0 0 1px  whitesmoke;\n          /* Control the  timing of frames */\n        animation: glow 7.0s ease infinite;\n        -moz-animation: glow 5.0s ease infinite;\n        -webkit-animation: glow 5.0s ease infinite;\n      }\n      @keyframes glow {\n        0%,\n        100% {\n        /* text-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 30px  #e62300, 0 0 40px  #e62300, 0 0 50px  #e62300, 0 0 60px #e62300, 0 0 70px #e62300; */\n           text-shadow: 0 0 1vw #FA1C16, 0 0 3vw #FA1C16, 0 0 10vw #FA1C16, 0 0 10vw #FA1C16, 0 0 .4vw #FED128, .5 vw .5 vw .1vw #806914;\n          color: #FED128; \n        }\n        50% {\n        /* text-shadow: 0 0 20px #fff, 0 0 30px #37dbc0, 0 0 40px  #37dbc0, 0 0 50px  #37dbc0, 0 0 60px  #37dbc0, 0 0 70px  #37dbc0, 0 0 80px #37dbc0; */\n             text-shadow: 0 0 .5vw #800E0B, 0 0 1.5vw #800E0B, 0 0 5vw #800E0B, 0 0 5vw #800E0B, 0 0 .2vw #800E0B, .5 vw .5 vw .1vw #40340A;\n          color: #806914; \n        }\n      }\n  }\n`;\n\nconst NavBar = props => {\n    const handleLogout = () => {\n        props.clearUser();\n        props.history.push('/');\n    }\n    return (\n\n        <Styles>\n            {/* Bringing in my Jumbotron = Webpage Banner */}\n            <Jumbotron />\n            {/* lg needs adjustment */}\n            <Navbar expand=\"lg\">\n                <Navbar.Brand href=\"\">\n                    PLANT & TRACK\n                </Navbar.Brand>\n                {/*LOGIN LOGOUT METHODS  */}\n                {props.hasUser ? <span className=\"h\" onClick={handleLogout}> Logout </span> :\n                    <Link className=\"h\" to=\"/login\">Login</Link>}\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        <Nav.Item>\n                            <Nav.Link ><div className=\"PLANTCOLLECTION\">\n                                {props.hasUser ? <Link to=\"/home\">PLANT COLLECTION</Link> : null}\n                            </div></Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link>\n                                {props.hasUser ? <Link to=\"/DeadPlants\">OLE PLANT GRAVEYARD</Link> : null}\n                            </Nav.Link>\n                        </Nav.Item>\n                        {/*                         {props.hasUser ? <NavDropdown title=\"Additional Resources\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item></NavDropdown.Item>\n                            <NavDropdown.Item><Link to = 'https://plants.sc.egov.usda.gov/java/'><button>USDA PLANT DATABASE</button></Link></NavDropdown.Item>\n                            <NavDropdown.Item><Link to = 'https://www.bing.com/visualsearch/Microsoft/FlowerIdentification'><button>SEARCH BY PICTURE UPLOAD</button></Link></NavDropdown.Item>\n                        </NavDropdown> : null} */}\n                        {/* SEARCH BAR FORM PLACEMENT */}\n                        {/* {props.hasUser ? <Form inline>\n                            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                            <Button variant=\"outline-success\">Search</Button>\n                        </Form> : null} */}\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </Styles>\n    )\n}\nexport default withRouter(NavBar);","import React, { useState, useEffect } from 'react';\nimport \"./UserCard.css\"\nimport UserManager from '../../modules/UserManager';\n\n\n\n\n\nconst UserCard = props => {\n\tconst [liveCountz, setLiveCountz] = useState([])\n\tconst [deadCountz, setDeadCountz] = useState([])\n\tconsole.log(\"TEST5\", liveCountz)\n\tconsole.log(\"TEST6\", deadCountz)\n\tconst id = sessionStorage.getItem(\"activeUser\")\n\n\n\tconst gettheLiveCounts = () => {\n\t\tUserManager.getTheCount(id)\n\t\t\t.then(countFromAPI => {\n\t\t\t\tconst LiveCount = countFromAPI.filter(officialCountAPI => {\n\t\t\t\t\tif (officialCountAPI.isDead === false) {\n\t\t\t\t\t\treturn officialCountAPI\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tsetLiveCountz(LiveCount)\n\t\t\t})\n\t}\n\n\n\tconst gettheDeadCounts = () => {\n\t\tUserManager.getTheCount(id)\n\t\t\t.then(countFromAPI => {\n\t\t\t\tconst DeadCount = countFromAPI.filter(officialCountAPI => {\n\t\t\t\t\tif (officialCountAPI.isDead === true) {\n\t\t\t\t\t\treturn officialCountAPI\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tsetDeadCountz(DeadCount)\n\t\t\t})\n\t}\n\n\n\n\n\tuseEffect(() => {\n\t\tgettheLiveCounts();\n\t\tgettheDeadCounts();\n\t}, []);\n\n\n\n\n\treturn (\n\t\t<>\n\n\t\t\t<div id=\"cardz\">\n\t\t\t\t<h1 className=\"h1z\">\n\n\t\t\t\t\t{props.user.user}</h1>\n\t\t\t\t<div className=\"imagez-crop\">\n\t\t\t\t\t<img id=\"avatarz\" src=\"https://images.unsplash.com/photo-1482849297070-f4fae2173efe?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80\"></img>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"bioz\">\n\n\t\t\t\t\t<p>{props.user.bio}</p>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"statz\">\n\t\t\t\t\t<div className=\"colz\">\n\t\t\t\t\t\t<p className=\"statz\">{liveCountz.length}</p>\n\t\t\t\t\t\t<p className=\"labelz\">Live Plants</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"colz\">\n\t\t\t\t\t\t<p className=\"statz\">{deadCountz.length}</p>\n\t\t\t\t\t\t<p className=\"labelz\">Dead Plants</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div ClassName=\"buttonz\">\n\t\t\t\t\t<button className=\"buttonz1\" onClick={() => props.history.push(`/users/${props.user.id}/edit`)} >Edit your Card</button>\n\t\t\t\t\t<button className=\"buttonz2\" onClick={() => { props.history.push(\"/plants/new\") }}> New Plant? </button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t</>\n\n\t);\n};\n\nexport default UserCard;","import React, { useState, useEffect } from 'react';\nimport UserCard from './UserCard';\nimport UserManager from '../../modules/UserManager';\n\n\n\n\n\nconst UserList = (props) => {\n  const [user, setUser] = useState([]);\n  const id = sessionStorage.getItem(\"activeUser\")\n  const getUser = (id) => {\n    return UserManager.getUser(id).then(userFromAPI => {\n      setUser(userFromAPI)\n    });\n  };\n\n\n\n\n  // got the users from the API on the component's first render\n  useEffect(() => {\n    getUser(id);\n  }, []);\n\n  return (\n    <div>\n      <UserCard\n        key={user.id}\n        user={user}\n        name={user.name}\n        id={user.id}\n        {...props}\n      />\n    </div>\n\n  );\n};\nexport default UserList;","\nconst remoteURL = \"http://localhost:5005\"\n\nexport default {\n    //Joint Fetch Call\n    getAll(str) {\n        return fetch(`${remoteURL}/${str}`).then(result => result.json())\n    },\n\n\n\n\n\n    //PLANT FETCH CALLS START\n    getPlant(id) {\n        return fetch(`${remoteURL}/plants/${id}`).then(result => result.json())\n    },\n    deletePlant(id) {\n        return fetch(`${remoteURL}/plants/${id}`, {\n            method: \"DELETE\"\n        }).then(result => result.json())\n    },\n    post(newPlant) {\n        return fetch(`${remoteURL}/plants`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newPlant)\n        }).then(data => data.json())\n    },\n    updatePlant(editedPlant) {\n        return fetch(`${remoteURL}/plants/${editedPlant.id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(editedPlant)\n        }).then(data => data.json());\n    },\n    //END PLANT FETCH\n\n\n\n\n\n\n\n    //Fetch calls to bind tables\n\n    getWithDetails() {\n        return fetch(`http://localhost:5005/plants/?_expand=mood&_expand=waterLevel&_expand=sunlightLevel`)\n            .then(result => result.json())\n    },\n\n\n    getWithSingleDetails(id) {\n        return fetch(`http://localhost:5005/plants/${id}/?_expand=mood&_expand=waterLevel&_expand=sunlightLevel`)\n            .then(result => result.json())\n    },\n    getWithAllDetails(id) {\n        return fetch(`http://localhost:5005/plants/${id}/?_expand=mood&_expand=waterLevel&_expand=sunlightLevel&_expand=journal`)\n            .then(result => result.json())\n    },\n\n    getWithJournal() {\n        return fetch(`http://localhost:5005/journals/?_expand=plant`)\n            .then(result => result.json())\n    },\n    getWithSpecificPlants(id) {\n        return fetch(`http://localhost:5005/journals/${id}/?_expand=plant`)\n            .then(result => result.json())\n    },\n\n\n    getWithSpecificJournals(id) {\n        return fetch(`http://localhost:5005/journals?plantId=${id}&_expand=plant`)\n            .then(result => result.json())\n    },\n\n\n\n\n\n\n\n\n    //Journal Fetch CAlls:\n    getJournal(id) {\n        return fetch(`${remoteURL}/journals/${id}`).then(result => result.json())\n    },\n    deleteJournal(id) {\n        return fetch(`${remoteURL}/journals/${id}`, {\n            method: \"DELETE\"\n        }).then(result => result.json())\n    },\n\n    postJournal(newJournalEntry) {\n        return fetch(`${remoteURL}/journals`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newJournalEntry)\n        }).then(data => data.json())\n    },\n    update(editedJournal) {\n        return fetch(`${remoteURL}/journals/${editedJournal.id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(editedJournal)\n        }).then(data => data.json());\n    },\n    //End Journal Fetch Calls\n\n\n\n\n    //Graveyard CAlls\n\n    /*     GraveYardRoute(editedPlant){\n            return fetch (`${remoteURL}/journals/${editedPlant.id}`, {\n                method:\"PATCH\",\n                 headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    isDead: true \n                })\n            }) .then(resp => resp.json());\n        }*/\n\n}\n\n","const remoteURL = \"http://localhost:5005\"\n\n\nexport default {\n    getAllImages(str) {\n        return fetch(`${remoteURL}/${str}`).then(result => result.json())\n    },\n    getImage(id) {\n        return fetch(`${remoteURL}/images/${id}`).then(result => result.json())\n    },\n    deleteImage(id) {\n        return fetch(`${remoteURL}/images/${id}`, {\n            method: \"DELETE\"\n        }).then(result => result.json())\n    },\n    post(newImage) {\n        return fetch(`${remoteURL}/images`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newImage)\n        }).then(data => data.json())\n    },\n\n    getWithSpecificImages(id) {\n        return fetch(`http://localhost:5005/images?plantId=${id}&_expand=plant`)\n            .then(result => result.json())\n    },\n}","\nimport React from 'react';\nimport \"./PlantCard.css\"\n\n\n\nconst PlantJournalCard = (props) => {\n\n\n\n  return (\n\n    <>\n\n      {/*START OF WHATS BEING SENT TO PLANT CARD  */}\n\n      <div className=\"container-s\">\n\n        <div className=\"messageTitle\"> {props.journalEntry.journalTitle}</div>\n        <div className=\"messageDate\">{props.journalEntry.entryDate}</div>\n        <div className=\"messageEntry\">\n          <div className=\"truncate\"> {props.journalEntry.journalEntry} </div>\n        </div>\n\n        <button className=\"message__buttons\" type=\"button\" onClick={() => props.history.push(`/journals/${props.journalEntry.id}`)}>DETAILS</button>\n      </div>\n\n\n    </>\n\n  )\n}\n\nexport default PlantJournalCard; ","\nimport React from 'react';\n//import { Toast } from 'react-bootstrap';\nimport Image from 'react-bootstrap/Image'\n//import { Container, Row, Col} from 'react-bootstrap'\n\n\n\nconst ImageCard = (props) => {\n\n\n\n  return (\n\n  <>\n\n\n       <Image src={props.imageEntry.url} className=\"plantImg\" rounded /> \n\n\n    </>\n\n  )\n}\n\nexport default ImageCard; ","import { Link } from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport PlantManager from '../../modules/PlantManager';\nimport UserManager from \"../../modules/UserManager\";\nimport ImageManager from \"../../modules/ImageManager\";\nimport PlantJournalCard from \"./PlantJournalCard\"\nimport ImageCard from \"./ImageCard\"\nimport ReactCardFlip from 'react-card-flip';\nimport \"./PlantCard.css\"\nimport PlantList from \"./PlantList\";\n//import CloudFiles from '../../modules/CloudinaryWidget';\n\n\n\n\n\n\nconst PlantCard = (props) => {\n  const [journals, setJournals] = useState([]);\n  const [images, setImages] = useState([])\n  const [plant, setPlant] = useState({ userId: props.plant.userId, id: props.plant.id, nickName: props.plant.nickName, vernacularName: props.plant.vernacularName, entryDate: props.plant.entryDate, age: props.plant.indoorOutdoor, moodId: props.plant.MoodId, sunlightLevelId: props.plant.sunlightLevelId, waterLevelId: props.plant.waterLevelId, isDead: props.plant.isDead });\n  //console.log(\"plantListplant\", plant)\n  const [isDead, setIsDead] = useState({ isDead: props.isDead })\n  const [isLoading, setIsLoading] = useState(true);\n  //console.log(\"plantListJournals\", journals)\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  //Click Event for flip of the card\n  const handleClick = () => {\n    setIsFlipped(!isFlipped);\n  };\n\n\n\n\n  let timeStamp = new Intl.DateTimeFormat(\"en\", {\n    timeStyle: \"medium\",\n    dateStyle: \"short\"\n  });\n\n\n  const updatePlanttoGraveyard = evt => {\n    console.log(\"brendatest\", evt)\n    //evt.preventDefault()\n    setIsLoading(true);\n\n    //Created a way to change the plant through updateing the plant object....this way a button toggles the cards view between dead/alive    \n    //const MessageChanged = \"(DEAD PLANT)\"\n    let isDeadz = isDead.isDead ? false : true\n\n    const graveYardPlant = {\n      userId: props.plant.userId,\n      id: props.plant.id,\n      nickName: props.plant.nickName,\n      vernacularName: props.plant.vernacularName,\n      entryDate: props.plant.entryDate,\n      entryDate: timeStamp.format(Date.now()),\n      indoorOutdoor: props.plant.indoorOutdoor,\n      moodId: props.plant.moodId,\n      sunlightLevelId: props.plant.sunlightLevelId,\n      waterLevelId: props.plant.waterLevelId,\n      isDead: isDeadz\n    };\n    console.log(\"graveyardclickTEST\", graveYardPlant)\n    PlantManager.updatePlant(graveYardPlant)\n      .then(() => props.history.push(\"/home\"))\n    window.location.reload(false);\n  }\n\n\n\n\n\n\n  //This is the function responsible for bringing in the journal entries for the mapped PLANTJOURNALCARD\n\n  const expandedPlantandJournal = () => {\n    PlantManager.getWithSpecificJournals(props.plant.id)\n      .then(APIres => {\n        // console.log(\"plantCARdGETWITHs2\", APIres)\n        setJournals(APIres)\n\n      }\n      )\n  }\n\n  const expandedPlantandImage = () => {\n    ImageManager.getWithSpecificImages(props.plant.id)\n      .then(APIres => {\n        // console.log(\"images\", APIres)\n        setImages(APIres)\n      }\n      )\n  }\n  //END JOURNAL FUNCTION\n\n\n\n  useEffect(() => {\n    expandedPlantandJournal()\n    expandedPlantandImage()\n    setIsLoading(false);\n  }, [props.plantId]);\n\n\n\n\n\n  const currentUser = parseInt(sessionStorage.getItem(\"activeUser\"))\n  if (props.plant.userId === currentUser) {\n\n    return (\n\n\n      <div className=\"cardz\">\n        <ReactCardFlip cardZIndex={1} className=\"ReactCardzFlip\" isFlipped={isFlipped} flipDirection=\"horizontal\">\n          <div className=\"flip-card-front\" key=\"front\">\n            <div className=\"plantcard-names__Container\">\n              <div className=\"plantcard-vernacular-name__Container\">{props.plant.vernacularName}</div>\n              <div className=\"plantcard-nick-name__Container\">{props.plant.nickName}</div>\n            </div>\n            <div className=\"plantcard-logo-variable__Container\">\n              <div className=\"plantcard-logo\">\n                <div className=\"text-white\" data-toggle=\"buttons\">\n                  <label className=\"\"> <input type=\"checkbox\" id={props.plant.id} checked={isDead.isDead} onChange={updatePlanttoGraveyard} /><img className=\"PlantCardFrontButton\" src=\"https://img.icons8.com/plasticine/32/000000/headstone.png\" alt=\"button-generic\" /></label>\n                </div>\n\n                <Link to={`/plants/${props.plant.id}`}><button className=\"PlantCardFrontButton\" ><img className=\"PlantCardFrontButton\" src=\"https://img.icons8.com/plasticine/32/000000/view-details.png\" alt=\"button-generic\" /></button></Link>\n                <div className=\"plantCard-frontflip-button-Container\"><button onClick={handleClick}><img src=\"https://img.icons8.com/clouds/50/000000/swap.png\" /></button></div>\n              </div>\n              <div className=\"plantcard-variable-list__Container\">\n                <h1 className=\"VariableEntryTitle\"> Plant Specs. </h1>\n                <div className=\"TitleVariable\"> Created on: <p className=\"VariableEntry2\"> {props.plant.entryDate} </p></div>\n                <div className=\"TitleVariable\">Indoor/Outdoor:<p className=\"VariableEntry1\"> {props.plant.indoorOutdoor}</p></div>\n                <div className=\"TitleVariable\">Sunlight Level Req. :<p className=\"VariableEntry1\"> {props.plant.sunlightLevel.level}</p> </div>\n                <div className=\"TitleVariable\">Water Level Req. : <p className=\"VariableEntry1\">{props.plant.waterLevel.level} </p></div>\n                <div className=\"TitleVariable\">Mood of your plant this Week?:<p className=\"VariableEntry3\"> {props.plant.mood.level}</p> </div>\n              </div>\n            </div>\n            <div className=\"plantcard-image__Container\">\n              <div className=\"plantcard__image-window__Container\">\n                {/* This is where the cloudinary Window \"scroll\" series will go */}\n                <div className=\"plantImgCardsContainer\">\n                  {images.map(image =>\n                    <ImageCard\n                      key={image.id}\n                      imageEntry={image}\n                      {...props}\n                    />)}\n                </div>\n\n              </div>\n            </div>\n          </div>\n\n\n          <div className=\"flip-card-back\" key=\"back\">\n            <div className=\"plantcard-journal-title__Container\">\n              Journal Entries: <p className=\"plantCardBackName\"> {props.plant.nickName}</p>\n            </div>\n\n            {/* <button type=\"button\" className=\"waves-effect waves-light btn\" onClick={() => { props.history.push(\"/journals/new/\") }}> New Journal Entry ?</button> */}\n            {/* <Link to={`/journals/${props.plant.id}/new/`}><button>NEW PLANT BABY</button></Link> */}\n            <div className=\"plantcard-journal-entry__Container\">\n\n              <div>\n                {journals.map(journal =>\n                  <PlantJournalCard\n                    key={journal.id}\n                    journalEntry={journal}\n\n                    {...props}\n                  />)}\n              </div>\n\n            </div>\n\n            <div className=\"plantCard-journal-button-Container\">\n              <button type=\"button\" className=\"waves-effect waves-light btn-small\" onClick={handleClick}><img src=\"https://img.icons8.com/clouds/30/000000/swap.png\" alt=\"button-generic\" /></button>\n              <button type=\"button\" className=\"waves-effect waves-light btn-small\" onClick={() => { props.history.push(`/plants/${props.plant.id}/newjournal`) }}> <img src=\"https://img.icons8.com/plasticine/35/000000/create-new.png\" alt=\"button-generic\" /></button>\n            </div>\n          </div>\n        </ReactCardFlip>\n      </div>\n\n    )\n  }\n  else return null\n}\n\n\n\nexport default PlantCard;","import React, { useState, useEffect } from 'react';\nimport PlantCard from './PlantCard';\nimport PlantManager from '../../modules/PlantManager';\nimport \"./PlantCard.css\"\nimport \"./SearchBar.css\"\n\n\n\nconst PlantList = (props) => {\n  const [plants, setPlants] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [filteredPlants, setFilteredPlants] = useState([])\n\n\n  const withDetails = () => {\n    PlantManager.getWithDetails(\"plants\").then(plantsfromAPI => {\n      plantsfromAPI.sort((x, y) => {\n        let a = new Date(x.entryDate),\n          b = new Date(y.entryDate);\n        return b - a;\n      });\n      setPlants(plantsfromAPI)\n    });\n  }\n\n\n  const deletePlant = (id) => {\n    PlantManager.delete(id)\n      .then(() => PlantManager.getAll(\"plants\").then(setPlants))\n  };\n\n\n\n  useEffect(() => {\n    withDetails();\n  }, []);\n\n  useEffect(() => {\n    setFilteredPlants(\n      plants.filter(plant =>\n        plant.nickName.toLowerCase().includes(search.toLowerCase())\n      )\n    );\n  }, [search, plants]);\n\n\n\n\n\n  return (\n    <>\n\n      <div class=\"container\">\n        <div class=\"search\">\n          <div>\n            <input type=\"text\" required placeholder=\"Search . . .\" onChange={evt => setSearch(evt.target.value)} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"plantCards-Center__Container\">\n        {filteredPlants.map(plant =>\n          plant.isDead ? null : //TOGGLE FOR PLANT STATUS TO SHOW ONLY FALSE\n            //!plant.isDead ? null:  //ToGGLE FOR PLANT STATUS TO SHOW ONLY TRUE\n            <PlantCard\n              key={plant.id}\n              plant={plant}\n              deletePlant={deletePlant}\n              search={search}\n              plants={plants}\n              setFilteredPlants={setFilteredPlants}\n              {...props}\n            />)}\n      </div>\n\n    </>\n  );\n};\nexport default PlantList;\n\n\n\n\n\n\n\n","\nimport React, { useState, useEffect } from 'react';\nimport \"./Home.css\";\nimport UserList from '../auth/UserList';\nimport PlantList from \"../plant/PlantList\";\n\n\n\nconst Home = props => {\n\n\n  return (\n    <>\n\n      <header></header>\n      <div id=\"main\">\n        <article>\n          <div>\n            <PlantList\n              {...props}\n            />\n          </div>\n        </article>\n        <nava>\n          <UserList\n            {...props} />\n        </nava>\n        <aside></aside>\n      </div>\n      <footer></footer>\n\n    </>\n  )\n};\n\nexport default Home;","//import { Link } from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport PlantManager from '../../modules/PlantManager';\nimport PlantJournalCard from \"./PlantJournalCard\"\nimport ReactCardFlip from 'react-card-flip';\nimport ImageManager from \"../../modules/ImageManager\";\nimport ImageCard from \"./ImageCard\"\n\n\nlet timeStamp = new Intl.DateTimeFormat(\"en\", {\n  timeStyle: \"medium\",\n  dateStyle: \"short\"\n});\n\nconst GraveYardCard = (props) => {\n\n  const [journals, setJournals] = useState([]);\n  const [plant, setPlant] = useState({ userId: props.plant.userId, id: props.plant.id, nickName: props.plant.nickName, vernacularName: props.plant.vernacularName, entryDate: timeStamp.format(Date.now()), indoorOutdoor: props.plant.indoorOutdoor, moodId: props.plant.MoodId, sunlightLevelId: props.plant.sunlightLevelId, waterLevelId: props.plant.waterLevelId, isDead: props.plant.isDead });\n  const [images, setImages] = useState([])\n  //console.log(\"plantListplant\", plant)\n  const [isDead, setIsDead] = useState({ isDead: props.isDead })\n  const [isLoading, setIsLoading] = useState(true);\n  //console.log(\"plantListJournals\", journals)\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const handleClick = () => {\n    setIsFlipped(!isFlipped);\n  };\n\n\n\n\n  const updatePlanttoGraveyard = evt => {\n    console.log(\"brendatest\", evt)\n    setIsLoading(true);\n\n    let isDeadz = isDead.isDead ? true : false\n\n    const graveYardPlant = {\n      userId: props.plant.userId,\n      id: props.plant.id,\n      nickName: props.plant.nickName,\n      vernacularName: props.plant.vernacularName,\n      entryDate: timeStamp.format(Date.now()),\n      indoorOutdoor: props.plant.indoorOutdoor,\n      moodId: props.plant.moodId,\n      sunlightLevelId: props.plant.sunlightLevelId,\n      waterLevelId: props.plant.waterLevelId,\n      isDead: isDeadz\n    };\n    console.log(\"graveyardclickTEST\", graveYardPlant)\n    PlantManager.updatePlant(graveYardPlant)\n      .then(() => props.history.push(\"/home\"))\n  }\n\n\n\n\n\n  //This is the function responsible for bringing in the journal entries for the mapped PLANTJOURNALCARD\n\n  const expandedPlantandJournal = () => {\n    PlantManager.getWithSpecificJournals(props.plant.id)\n      .then(APIres => {\n        console.log(\"plantCARdGETWITHs2\", APIres)\n        setJournals(APIres)\n      }\n      )\n  }\n\n  const expandedPlantandImage = () => {\n    ImageManager.getWithSpecificImages(props.plant.id)\n      .then(APIres => {\n        // console.log(\"images\", APIres)\n        setImages(APIres)\n      }\n      )\n  }\n  //END JOURNAL FUNCTION\n\n\n\n\n  useEffect(() => {\n    expandedPlantandImage()\n    expandedPlantandJournal()\n    setIsLoading(false);\n  }, [props.plantId]);\n\n\n\n\n  const currentUser = parseInt(sessionStorage.getItem(\"activeUser\"))\n\n  if (props.plant.userId === currentUser) {\n    return (\n\n\n      <div className=\"cardz\">\n        <ReactCardFlip cardZIndex={1} className=\"ReactCardzFlip\" isFlipped={isFlipped} flipDirection=\"horizontal\">\n\n          <div className=\"DEAD-flip-card-front\" key=\"front\">\n            <div className=\"DEAD-plantcard-names__Container\">\n              <div className=\"plantcard-vernacular-name__Container\">{props.plant.vernacularName}</div>\n              <div className=\"plantcard-nick-name__Container\">{props.plant.nickName}</div>\n            </div>\n            <div className=\"DEAD-plantcard-logo-variable__Container\">\n              <div className=\"plantcard-logo\">\n                <div className=\"text\" data-toggle=\"buttons\">\n                  <h6>NOT DEAD?</h6>\n\n                  <label className=\"\"> <input type=\"checkbox\" id={props.plant.id} checked={isDead.isDead} onChange={updatePlanttoGraveyard} /><img src=\"https://img.icons8.com/plasticine/40/000000/plant-under-sun.png\" alt=\"button-generic\" /></label>\n                  <button onClick={handleClick}><img src=\"https://img.icons8.com/clouds/40/000000/swap.png\" /></button>\n                </div>\n              </div>\n              <div className=\"DEAD-plantcard-variable-list__Container\">\n                <h1 className=\"VariableEntryTitle\"> Plant Specs. </h1>\n\n                <div className=\"TitleVariable\"> Date of passing: <p className=\"VariableEntry2\"> {props.plant.entryDate} </p></div>\n                <div className=\"TitleVariable\">Indoor/Outdoor: <p className=\"VariableEntry1\"> {props.plant.indoorOutdoor}</p></div>\n                <div className=\"TitleVariable\">Sunlight Level Req. :<p className=\"VariableEntry1\"> {props.plant.sunlightLevel.level}</p> </div>\n                <div className=\"TitleVariable\">Water Level Req. : <p className=\"VariableEntry1\">{props.plant.waterLevel.level} </p></div>\n                <div className=\"TitleVariable\">Mood of your plant this Week?:<p className=\"VariableEntry3\"> Dang..... GraveYard'd!</p> </div>\n                {/* <Link to={`/plants/${props.plant.id}`}><button>Lets take a closer look!</button></Link> */}\n              </div>\n            </div>\n            <div className=\"DEAD-plantcard-image__Container\">\n              <div className=\"DEAD-plantcard__image-window__Container\">\n                {/* This is where the cloudinary Window \"scroll\" series will go */}\n                <div className=\"plantImgCardsContainer\">\n                  {images.map(image =>\n                    <ImageCard\n                      key={image.id}\n                      imageEntry={image}\n                      {...props}\n                    />)}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"DEAD-flip-card-back\" key=\"back\">\n            <div className=\"plantcard-journal-title__Container\">\n              Journal Entries: <p className=\"plantCardBackName\"> {props.plant.nickName}</p>\n            </div>\n            <div className=\"DEAD-plantcard-journal-entries__Container\">\n             \n              <div className=\"plantcard-journal-entry__Container\">\n\n                <div>\n                  {journals.map(journal =>\n                    <PlantJournalCard\n                      key={journal.id}\n                      journalEntry={journal}\n                      {...props}\n                    />)}\n                </div>\n\n              </div>\n            </div>\n            <div className=\"plantCard-journal-button-Container\">\n              <button onClick={handleClick}><img src=\"https://img.icons8.com/clouds/50/000000/swap.png\" /></button>\n            </div>\n\n          </div>\n\n        </ReactCardFlip>\n      </div>\n\n\n    )\n  }\n  else return null\n}\n\nexport default GraveYardCard;","import React, { useState, useEffect } from 'react';\nimport GraveYardCard from './GraveYardCard'\nimport PlantManager from '../../modules/PlantManager';\nimport \"./PlantCard.css\"\nimport \"./SearchBar.css\"\n\n\n\nconst PlantGraveYardList = (props) => {\n  const [plants, setPlants] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [filteredPlants, setFilteredPlants] = useState([])\n\n\n  const withDetails = () => {\n    PlantManager.getWithDetails(\"plants\").then(plantsfromAPI => {\n      plantsfromAPI.sort((x, y) => {\n        let a = new Date(x.entryDate),\n          b = new Date(y.entryDate);\n        return b - a;\n      });\n      setPlants(plantsfromAPI)\n    });\n  }\n\n\n  const deletePlant = (id) => {\n    PlantManager.delete(id)\n      .then(() => PlantManager.getAll(\"plants\").then(setPlants))\n  };\n\n\n\n  useEffect(() => {\n    withDetails();\n  }, []);\n\n  useEffect(() => {\n    setFilteredPlants(\n      plants.filter(plant =>\n        plant.nickName.toLowerCase().includes(search.toLowerCase())\n      )\n    );\n  }, [search, plants]);\n\n\n\n  return (\n    <>\n\n\n      <div class=\"container\">\n        <div class=\"search\">\n          <div>\n            <input type=\"text\" required placeholder=\"Search . . .\" onChange={evt => setSearch(evt.target.value)} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"plantCards-Center__Container\">\n        {filteredPlants.map(plant =>\n          //plant.isDead ? null: //TOGGLE FOR PLANT STATUS TO SHOW ONLY FALSE\n          !plant.isDead ? null :  //ToGGLE FOR PLANT STATUS TO SHOW ONLY TRUE\n            <GraveYardCard\n              key={plant.id}\n              plant={plant}\n              deletePlant={deletePlant}\n              search={search}\n              plants={plants}\n              setFilteredPlants={setFilteredPlants}\n              //isChecked={isChecked}\n              {...props}\n            />)}\n      </div>\n\n    </>\n  );\n};\nexport default PlantGraveYardList;","import React, { useState, useEffect } from 'react';\nimport \"./Home.css\";\nimport UserList from '../auth/UserList';\nimport PlantGraveYardList from '../plant/PlantGraveYardList';\n\n\n\n\n\nconst GraveYard = props => {\n\n  return (\n    <>\n\n      <header></header>\n      <div id=\"main\">\n        <article>\n\n          <PlantGraveYardList {...props} />\n        </article>\n        <nava>\n          <UserList {...props} />\n        </nava>\n        <aside></aside>\n      </div>\n      <footer></footer>\n\n    </>\n  )\n};\n\n\nexport default GraveYard;","import React, { useState } from \"react\"\nimport UserManager from \"../../modules/UserManager\"\n\nimport loginImg from \"../../login.svg\";\n\n\n\n\n\nexport const Login = (props) => {\n\n  const [credentials, setCredentials] = useState({ password: \"\", user: \"\" });\n\n\n  // Update state whenever an input field is edited\n  const handleFieldChange = (evt) => {\n    const stateToChange = { ...credentials };\n    stateToChange[evt.target.id] = evt.target.value;\n    setCredentials(stateToChange);\n  };\n\n\n\n  const tryLogin = (evt) => {\n    //evt.preventDefault();\n    let loginAccepted = false\n    UserManager.getAllUsers()\n      .then(users => {\n        users.find(user => {\n          if (user.user === credentials.user && user.password === credentials.password) {\n            loginAccepted = true\n            sessionStorage.setItem(\"credentials\", JSON.stringify(credentials))\n            sessionStorage.setItem(\"activeUser\", user.id)\n            props.setUser(credentials);\n            props.history.push(\"/home\");\n            window.location.reload(false)\n\n          }\n\n\n        })\n        if (loginAccepted === false) {\n          window.alert(\"Incorrect username or password\")\n        }\n      })\n\n\n  }\n\n\n\n\n  /* This is representing our sign in and registration forms. \n  We can adjust the visualization and functionality as needed */\n\n  return (\n\n\n    <div>\n      <form >\n        <div className=\"base-container\" ref={props.containerRef}>\n\n          <div className=\"content\">\n            <div className=\"image\">\n              <img src={loginImg} alt=\"Login\" />\n            </div>\n            <div className=\"header\">Sign In</div>\n            <div className=\"form\">\n              <div className=\"form-group\">\n                <label htmlFor=\"userName\">Username</label>\n                <input onChange={handleFieldChange} id=\"user\" type=\"text\" name=\"username\" placeholder=\"username\" required=\"\" />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"password\">Password</label>\n                <input onChange={handleFieldChange} id=\"password\" type=\"password\" name=\"password\" placeholder=\"password\" required=\"\" />\n              </div>\n            </div>\n          </div>\n          <div className=\"footer\">\n            {/* onClick={() => { props.history.push(`/home`) }}  */}\n            <button type=\"button\" className=\"btn\" onClick={tryLogin}>\n              Login\n        </button>\n          </div>\n        </div>\n      </form>\n    </div>\n\n\n  );\n};","import React, { useState } from \"react\"\nimport UserManager from \"../../modules/UserManager\"\nimport loginImg from \"../../login.svg\";\n\n\n\n\n\nexport const Register = (props) => {\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\", user: \"\", img: \"https://www.kindpng.com/picc/m/24-248253_user-profile-default-image-png-clipart-png-download.png\", bio: \"\" });\n\n  // Update state whenever an input field is edited\n  const handleFieldChange = (evt) => {\n    const stateToChange = { ...credentials };\n    stateToChange[evt.target.id] = evt.target.value;\n    setCredentials(stateToChange);\n  };\n\n\n  const handleRegister = evt => {\n    evt.preventDefault();\n    if (credentials.email === \"\" || credentials.password === \"\" || credentials.userName === \"\") {\n      window.alert(\"Please input a username, password, email, and bio!\");\n    } else {\n\n\n      // Create the credentials and redirect user to credentials list\n      UserManager.createUser(credentials)\n        .then(() => {\n\n          sessionStorage.setItem(\"credentials\", JSON.stringify(credentials))\n          props.history.push(\"/\")\n        }\n        );\n    }\n  };\n\n\n  /* This is representing our sign in and registration forms. \n  We can adjust the visualization and functionality as needed */\n\n  return (\n\n    <div>\n      <form onSubmit={handleRegister}>\n        <div className=\"base-container\" ref={props.containerRef}>\n          <div className=\"content\">\n            <div className=\"image\">\n              <img src={loginImg} alt=\"Register\" />\n            </div>\n            <div className=\"form\">\n              <div className=\"form-group\">\n                <label htmlFor=\"inputUserName\"> Create your Username </label>\n                <input onChange={handleFieldChange} id=\"user\" type=\"userName\" name=\"username\" placeholder=\"username\" required=\"\" />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"inputUserName\">Email</label>\n                <input onChange={handleFieldChange} id=\"email\" type=\"email\" name=\"email\" placeholder=\"email@....com\" required=\"\" />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"inputPassword\">Password</label>\n                <input onChange={handleFieldChange} id=\"password\" type=\"password\" name=\"password\" placeholder=\"password\" required=\"\" />\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"inputBio\">Bio</label>\n                <input onChange={handleFieldChange} id=\"bio\" type=\"bio\" name=\"bio\" placeholder=\"Who are you?\" required=\"\" />\n              </div>\n            </div>\n          </div>\n          <button type=\"submit\" className=\"btn\">\n            Register\n        </button>\n        </div>\n      </form>\n    </div>\n\n  );\n};","import React, { useState, useEffect } from \"react\";\nimport \"./CustomLogin.scss\";\nimport { Login, Register } from \"./Indexz\";\n\n\n\n\n\n\nexport const CustomLogin = (props) => {\n  const setUser = props.setUser\n  const [hasUser, setHasUser] = useState(1);\n  let current = hasUser ? \"Register\" : \"Login\";\n  let currentActive = hasUser ? \"Login\" : \"Register\";\n\n  let rightSide;\n  useEffect(() => {\n    rightSide.classList.add(\"right\");\n  }, []);\n\n  const handleActiveState = () => {\n    if (hasUser) {\n      rightSide.classList.remove(\"right\");\n      rightSide.classList.add(\"left\");\n    } else {\n      rightSide.classList.remove(\"left\");\n      rightSide.classList.add(\"right\");\n    }\n\n    setHasUser(!hasUser);\n  };\n\n  return (\n    <>\n\n      <div className=\"CustomLogin\">\n        <div className=\"login\">\n          <div className=\"container\">\n            {hasUser && <Login setUser={setUser} {...props} containerRef={(ref) => (current = ref)} />}\n            {!hasUser && (\n              <Register setUser={setUser}{...props} containerRef={(ref) => (current = ref)} />\n            )}\n          </div>\n          <RightSide\n            current={current}\n            currentActive={currentActive}\n            containerRef={(ref) => (rightSide = ref)}\n            onClick={handleActiveState.bind(this)}\n          />\n        </div>\n      </div>\n\n\n\n\n    </>\n  );\n}\nconst RightSide = (props) => {\n  return (\n    <>\n      <div\n        className=\"right-side\"\n        ref={props.containerRef}\n        onClick={props.onClick}\n      >\n        <div className=\"inner-container\">\n          <div className=\"text\">{props.current}</div>\n        </div>\n      </div>\n\n    </>\n  );\n};\nexport default CustomLogin;","import React, { useState, useEffect } from \"react\"\nimport UserManager from \"../../modules/UserManager\"\nimport './css-java-extension/materialize.css';\nimport './css-java-extension/materialize.min.css';\n\n\n\n\n\n\n\nconst UserEditForm = props => {\n    const [user, setUser] = useState({ user: \"\", userId: 0, img: \"\", email: \"\", password: \"\", bio: \"\" });\n    const [isLoading, setIsLoading] = useState(false);\n\n    const handleFieldChange = evt => {\n        const stateToChange = { ...user };\n        stateToChange[evt.target.id] = evt.target.value;\n        setUser(stateToChange);\n    };\n\n\n    const updateUser = evt => {\n        evt.preventDefault()\n        setIsLoading(true);\n\n        // This is an edit, so we need the id\n        const editedUserz = {\n            userId: user.userId,\n            id: props.match.params.userId,\n            user: user.user,\n            password: user.password,\n            img: user.img,\n            email: user.email,\n            bio: user.bio\n\n        };\n        UserManager.updateSpecificUser(editedUserz)\n            .then(() => props.history.push(\"/home\"))\n            .then(() => window.location.reload())\n\n\n\n\n    }\n\n\n    useEffect(() => {\n        UserManager.getUser(props.match.params.userId)\n            .then(user => {\n\n                setUser(user);\n                setIsLoading(false);\n\n            });\n    }, [props.match.params.userId]);\n\n\n\n    return (\n        <>\n            <form>\n                <fieldset>\n                    <div className=\"formgrid\">\n                        <input\n                            type=\"hidden\"\n                            required=\"\"\n                            className=\"form-control\"\n                            onChange={handleFieldChange}\n                            id=\"userId\"\n                            value={user.userId}\n                        />\n                        <label htmlFor=\"name\">Enter new Username: </label>\n                        <input\n                            type=\"text\"\n                            required=\"\"\n                            className=\"form-control\"\n                            onChange={handleFieldChange}\n                            id=\"user\"\n                            value={user.user}\n                        />\n\n                        <label htmlFor=\"name\">Enter new Email Address: </label>\n                        <input\n                            type=\"text\"\n                            required=\"\"\n                            className=\"form-control\"\n                            onChange={handleFieldChange}\n                            id=\"email\"\n                            value={user.email}\n                        />\n                        <label htmlFor=\"name\">New Password </label>\n                        <input\n                            type=\"text\"\n                            required=\"\"\n                            className=\"form-control\"\n                            onChange={handleFieldChange}\n                            id=\"password\"\n                            value={user.password}\n                        />\n                        <label htmlFor=\"bio\">Update your Bio</label>\n                        <input\n                            type=\"text\"\n                            required=\"\"\n                            className=\"form-control\"\n                            onChange={handleFieldChange}\n                            id=\"bio\"\n                            value={user.bio}\n                        />\n                        {/*                 \n                        <label htmlFor=\"profilePicture\">Profile Picture</label>\n                        <input\n                            type=\"image\"\n                            required =\"\"\n                            className=\"form-control\"\n                            onChange={handleFieldChange}\n                            id=\"img\"\n                            value={user.img}\n                        /> */}\n\n\n                    </div>\n                    <div className=\"alignRight\">\n                        <button\n                            type=\"button\" disabled={isLoading}\n                            onClick={updateUser}\n                            className=\"btn btn-primary\"\n                        >Submit</button>\n                    </div>\n                </fieldset>\n            </form>\n        </>\n    );\n}\n\nexport default UserEditForm","import React, { useState, useEffect } from 'react';\nimport PlantManager from '../../modules/PlantManager';\nimport { Form } from 'react-bootstrap';\nimport './css-java-extension/materialize.css';\nimport './css-java-extension/materialize.min.css';\n//import './css-java-extension/materialize.js';\n//import './css-java-extension/materialize.min.js';\n\n\n\n\n\n\n//Method for Creating Time Stamp in readeable form(mdn docs)...\nlet timeStamp = new Intl.DateTimeFormat(\"en\", {\n    timeStyle: \"medium\",\n    dateStyle: \"short\"\n});\n\nconst PlantForm = props => {\n    const [plant, setPlant] = useState({ userId: 0, id: 0, nickName: \"\", vernacularName: \"\", entryDate: timeStamp.format(Date.now()), indoorOutdoor: \"\", moodId: 0, sunlightLevelId: 0, waterLevelId: 0, isDead: false });\n    const [moods, setMoods] = useState([]);\n    const [sunlightLevels, setSunlightLevels] = useState([]);\n    const [waterLevels, setWaterLevels] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    //Tracks entries into text boxes\n    const handleFieldChange = evt => {\n        const stateToChange = { ...plant };\n        stateToChange[evt.target.id] = evt.target.value;\n        setPlant(stateToChange);\n    };\n\n\n\n    //DROPDOWN API CALLS\n    const getMoods = () => {\n        return PlantManager.getAll(\"moods\").then(moodsfromAPI => {\n            setMoods(moodsfromAPI)\n        })\n    };\n    const getSunlightLevels = () => {\n        return PlantManager.getAll(\"sunlightLevels\").then(sunlightLevelsfromAPI => {\n            setSunlightLevels(sunlightLevelsfromAPI)\n        })\n    };\n    const getWaterLevels = () => {\n        return PlantManager.getAll(\"waterLevels\").then(waterLevelsfromAPI => {\n            setWaterLevels(waterLevelsfromAPI)\n        })\n    };\n    //END DROPDOWN CALLS\n\n\n    useEffect(() => {\n        getMoods();\n        getSunlightLevels();\n        getWaterLevels();\n    }, []);\n\n\n\n    //TARGETING ACTIVE USER\n    const currentUserId = sessionStorage.getItem(\"activeUser\")\n    plant.userId = parseInt(currentUserId)\n\n\n\n    const constructNewPlant = evt => {\n        evt.preventDefault();\n        if (plant.nickName === \"\" || plant.vernacularName === \"\" || plant.indoorOutdoor === \"\" || plant.sunlightLevelId === 0 || plant.waterLevelId === 0 || plant.moodId === 0) {\n            window.alert(\"Please fill out all the entry requirements....otherwise your plant won't survive the season!\");\n        }\n        else {\n            setIsLoading(true)\n            plant.moodId = parseInt(plant.moodId)\n            plant.sunlightLevelId = parseInt(plant.sunlightLevelId)\n            plant.waterLevelId = parseInt(plant.waterLevelId)\n            PlantManager.post(plant)\n                //.then(() => PlantManager.getAll(plants))\n                .then(() => props.history.push(\"/home\"));\n        }\n    };\n\n\n\n    return (\n        <>\n            {/* FORM USING MATERILIZE */}\n            <div className=\"row\">\n                <div className=\"col s12 m5\">\n                    <div className=\"card-panel transparent\">\n                        <div className=\"row\">\n                            <form className=\"col s12\">\n                                <div className=\"row\">\n                                    <div className=\"input-field col s6\">\n                                        Vernacular Name:\n            <input placeholder=\"Enter in your plants English common name:\" id=\"vernacularName\" type=\"text\" required\n                                            onChange={handleFieldChange} className=\"validate\"></input>\n                                        <label for=\"vernacularName\"></label>\n                                    </div>\n                                    <div className=\"input-field col s6\">\n                                        Plants NickName:\n          <input placeholder=\"What would you like to call your plant?\" id=\"nickName\" type=\"text\" required\n                                            onChange={handleFieldChange} class=\"validate\"   ></input>\n                                        <label for=\"nickName\"></label>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"input-field col s12\">\n                                        Does your plant like an indoor enviorment or outdoor enviorment...or both?:\n          <div className=\"input-field inline\">\n                                            <input placeholder=\"Inside/Outside?\" id=\"indoorOutdoor\" type=\"text\" required\n                                                onChange={handleFieldChange} className=\"validate\"></input>\n                                            <label for=\"age\"></label>\n                                        </div>\n                                    </div>\n                                </div>\n                                {/* END MATERILIZE FORM*/}\n\n                                {/* DROPDOWN MENU FORM USING REACTSTRAP/BOOTSTRAP */}\n                                <div className=\"\">\n                                    <Form.Group className=\"\" >\n                                        <Form.Label>Plant Mood:</Form.Label>\n                                        {/* name=\"selectMulti\" id=\"\" multiple> */}\n                                        <Form.Control as=\"select\" className=\"moodForm\" controlId=\"moodId\"\n                                            value={parseInt(plant.moodId)} id=\"moodId\" required\n                                            onChange={handleFieldChange}  >\n                                            <option>Hows ya Babi's Mood</option>\n                                            {moods.map(mood =>\n                                                <option key={mood.id} value={mood.id}>{mood.level}</option>)}\n                                        </Form.Control>\n                                    </Form.Group>\n                                </div>\n                                <div className=\"\">\n                                    <Form.Group className=\"\" >\n                                        <Form.Label>Sunlight Level:</Form.Label>\n                                        <Form.Control as=\"select\" className=\"sunlightLevelForm\" controlId=\"sunlightLevelId\"\n                                            value={parseInt(plant.sunlightLevelId)} id=\"sunlightLevelId\" required\n                                            onChange={handleFieldChange}  >\n                                            <option>Hows ya Babi current Sun Levels</option>\n                                            {sunlightLevels.map(sunlightLevel =>\n                                                <option key={sunlightLevel.id} value={sunlightLevel.id}>{sunlightLevel.level}</option>)}\n                                        </Form.Control>\n                                    </Form.Group>\n                                </div>\n                                <div className=\"\">\n                                    <Form.Group className=\"\" >\n                                        <Form.Label>Water Level:</Form.Label>\n                                        <Form.Control as=\"select\" className=\"waterLevelForm\" controlId=\"waterLevelId\"\n                                            value={parseInt(plant.waterLevelId)} id=\"waterLevelId\" required\n                                            onChange={handleFieldChange}  >\n                                            <option>Babi Thirsty?</option>\n                                            {waterLevels.map(waterLevel =>\n                                                <option key={waterLevel.id} value={waterLevel.id}>{waterLevel.level}</option>)}\n                                        </Form.Control>\n                                    </Form.Group>\n                                </div>\n\n\n\n\n                                <div className=\"alignRight\">\n                                    <button\n                                        className=\"waves-effect waves-light btn\"\n                                        type=\"button\"\n                                        disabled={isLoading}\n                                        onClick={constructNewPlant}\n                                    >Submit</button>\n                                </div>\n                            </form>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {/* END DROPDOWN MENU FORM USING REACTSTRAP/BOOTSTRAP */}\n        </>\n    );\n};\n\nexport default PlantForm;","//import { Link } from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport PlantManager from '../../modules/PlantManager';\nimport ImageManager from '../../modules/ImageManager'\nimport ReactCardFlip from 'react-card-flip';\nimport PlantJournalCard from \"./PlantJournalCard\"\nimport ImageCard from \"./ImageCard\"\n//import \"./PlantDetails.css\"\n\n\n\n\n\n//Method for Creating Time Stamp in readeable form(mdn docs)...\nlet timeStamp = new Intl.DateTimeFormat(\"en\", {\n  timeStyle: \"medium\",\n  dateStyle: \"short\"\n});\n\n//User clicks details button thus rendering the animals info\nconst PlantDetail = props => {\n  const [plant, setPlant] = useState({ userId: 0, id: 0, nickName: \"\", vernacularName: \"\", entryDate: timeStamp.format(Date.now()), indoorOutdoor: \"\", moodId: 0, sunlightLevelId: 0, waterLevelId: 0, isDead: false });\n  const [journals, setJournals] = useState([]);\n  const [images, setImages] = useState([])\n  const [mood, setMood] = useState({ level: 0 });\n  const [sunlightLevel, setSunlightLevel] = useState({ level: 0 });\n  const [waterLevel, setWaterLevel] = useState({ level: 0 });\n  const [isDead, setIsDead] = useState({ isDead: props.isDead })\n  const [isLoading, setIsLoading] = useState(true);\n  //console.log(\"yee\", plant)\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const handleClick = () => {\n    setIsFlipped(!isFlipped);\n  };\n\n\n\n\n  //Important Lesson learned below: if your gonna set the state.....dont pinpoint the property inside the \"expandedPlant\"\n  //...it turns out that React cant pinpoint cause your nesting too deep. Rather pass the object and then set directions in the return.\n\n  //START OF EXAPNSION FETCH CALLS\n  const expandedPlant = () => {\n    PlantManager.getWithSingleDetails(props.plantId)\n      .then(plant => {\n        //console.log(\"yeettttt2\", plant)\n        setPlant(plant)\n        setMood(plant.mood)\n        setSunlightLevel(plant.sunlightLevel)\n        setWaterLevel(plant.waterLevel)\n      }\n      )\n  }\n\n  const expandedPlantandJournal = () => {\n    PlantManager.getWithSpecificJournals(props.plantId)\n      .then(APIres => {\n        //console.log(\"plantjourn\", APIres)\n        setJournals(APIres)\n      }\n      )\n  }\n\n  const expandedPlantandImage = () => {\n    ImageManager.getWithSpecificImages(props.plantId)\n      .then(APIres => {\n        console.log(\"images\", APIres)\n        setImages(APIres)\n      }\n      )\n  }\n  //END OF EXPANSION FETCH\n\n\n\n\n  const updatePlanttoGraveyard = evt => {\n    // console.log(\"brendatest\", evt)\n    evt.preventDefault()\n    setIsLoading(true);\n\n    let isDeadz = isDead.isDead ? false : true\n\n    const graveYardPlant = {\n      userId: plant.userId,\n      id: plant.id,\n      nickName: plant.nickName,\n      vernacularName: plant.vernacularName,\n      entryDate: plant.entryDate,\n      entryDate: timeStamp.format(Date.now()),\n      indoorOutdoor: plant.indoorOutdoor,\n      moodId: plant.moodId,\n      sunlightLevelId: plant.sunlightLevelId,\n      waterLevelId: plant.waterLevelId,\n      isDead: isDeadz\n    };\n    //console.log(\"graveyardclickTEST\", graveYardPlant)\n    PlantManager.updatePlant(graveYardPlant)\n      .then(() => props.history.push(\"/home\"))\n    //window.location.reload(false);\n  }\n\n\n  useEffect(() => {\n    expandedPlant()\n    expandedPlantandJournal()\n    expandedPlantandImage()\n    setIsLoading(false);\n\n  }, [props.plantId]);\n\n\n  const handleDelete = () => {\n    setIsLoading(true);\n    PlantManager.deletePlant(plant.id).then(() =>\n      props.history.push(\"/home\")\n    );\n  };\n\n\n\n  const currentUser = parseInt(sessionStorage.getItem(\"activeUser\"))\n  if (plant.userId === currentUser) {\n\n    return (\n\n      <>\n        <div className=\"centeringdetailsCARD\">\n          <ReactCardFlip isFlipped={isFlipped} flipDirection=\"horizontal\">\n\n            <div className=\"flip-card-front\" key=\"front\">\n              <div className=\"flip-card-front\">\n                <div className=\"plantcard-names__Container\">\n                  <div className=\"plantcard-vernacular-name__Container\">{plant.vernacularName}</div>\n                  <div className=\"plantcard-nick-name__Container\">{plant.nickName}</div>\n                </div>\n                <div className=\"plantcard-logo-variable__Container\">\n                  <div className=\"plantcard-logo\">\n                    <div className=\"text-white\" data-toggle=\"buttons\">\n                      <label className=\"\"> <input type=\"checkbox\" id={plant.id} checked={isDead.isDead} onChange={updatePlanttoGraveyard} /><img src=\"https://img.icons8.com/plasticine/32/000000/headstone.png\" alt=\"button-generic\" /></label>\n                    </div>\n                    <button className=\"danger\" type=\"button\" onClick={() => props.history.push(`/plants/${plant.id}/edit`)}><img src=\"https://img.icons8.com/plasticine/32/000000/edit.png\" alt=\"button-generic\" /></button>\n                    <button type=\"button\" className=\"\" onClick={() => { props.history.push(`/plants/${props.plantId}/newimage`) }}> <img src=\"https://img.icons8.com/plasticine/32/000000/image-file.png\" alt=\"button-generic\" /></button>\n                    <button className=\"\" type=\"button\" onClick={() => handleDelete(plant.id)}><img src=\"https://img.icons8.com/plasticine/32/000000/delete-forever.png\" alt=\"button-generic\" /></button>\n                    <button onClick={handleClick}><img src=\"https://img.icons8.com/clouds/30/000000/swap.png\" /></button>\n                  </div>\n                  <div className=\"plantcard-variable-list__Container\">\n                    <ol className=\"VariableEntryTitle\"> Plant Specs. </ol>\n\n                    <div className=\"TitleVariable\"> Created on: <p className=\"VariableEntry2\"> {plant.entryDate} </p></div>\n                    <div className=\"TitleVariable\">Indoor/Outdoor:<p className=\"VariableEntry1\"> {plant.indoorOutdoor}</p></div>\n                    <div className=\"TitleVariable\">Sunlight Level Req. :<p className=\"VariableEntry1\"> {sunlightLevel.level}</p> </div>\n                    <div className=\"TitleVariable\">Water Level Req. : <p className=\"VariableEntry1\">{waterLevel.level} </p></div>\n                    <div className=\"TitleVariable\">Mood of your plant this Week?:<p className=\"VariableEntry3\"> {mood.level}</p> </div>\n                  </div>\n                </div>\n                <div className=\"plantcard-image__Container\">\n                  <div className=\"plantcard__image-window__Container\">\n                    {/* This is where the cloudinary Window \"scroll\" series will go */}\n                    <div className=\"plantImgCardsContainer\">\n                      {images.map(image =>\n                        <ImageCard\n                          key={image.id}\n                          imageEntry={image}\n                          {...props}\n                        />)}\n                    </div>\n\n                    {/*                 <CloudFiles {...props} />\n                {props.plant.plantUrl} */}\n\n                  </div>\n                </div>\n\n              </div>\n\n              {/* This is where the cloudinary Window \"scroll\" series will go */}\n\n            </div>\n\n\n            {/* <PlantCardBack /> */}\n            <div className=\"flip-card-back\" key=\"back\">\n              <div className=\"plantcard-journal-title__Container\">\n                Journal Entries: <p className=\"plantCardBackName\"> {plant.nickName}</p>\n              </div>\n\n              <div className=\"plantcard-journal-entry__Container\">\n\n                <div>\n                  {journals.map(journal =>\n                    <PlantJournalCard\n                      key={journal.id}\n                      journalEntry={journal}\n\n                      {...props}\n                    />)}\n                </div>\n\n              </div>\n\n              <div className=\"plantCard-journal-button-Container\">\n                <button type=\"button\" className=\"waves-effect waves-light btn-small\" onClick={handleClick}><img src=\"https://img.icons8.com/clouds/30/000000/swap.png\" /></button>\n                <button type=\"button\" className=\"waves-effect waves-light btn-small\" onClick={() => { props.history.push(`/plants/${plant.id}/newjournal`) }}> <img src=\"https://img.icons8.com/plasticine/35/000000/create-new.png\" alt=\"button-generic\" /></button>\n              </div>\n            </div>\n          </ReactCardFlip>\n        </div>\n      </>\n\n    )\n  }\n  else return null\n}\n\n\nexport default PlantDetail;","import React, { useState, useEffect } from \"react\"\nimport PlantManager from \"../../modules/PlantManager\"\nimport { Form } from \"react-bootstrap\";\n\n\n\nconst PlantEditForm = props => {\n    const [plant, setPlant] = useState({ userId: 0, nickName: \"\", vernacularName: \"\", entryDate: \"\", indoorOutdoor: \"\", moodId: 0, sunlightLevelId: 0, waterLevelId: 0, isDead: false });\n    const [isLoading, setIsLoading] = useState(false);\n    const [moods, setMoods] = useState([]);\n    const [sunlightLevels, setSunlightLevels] = useState([]);\n    const [waterLevels, setWaterLevels] = useState([]);\n\n\n\n\n    const handleFieldChange = evt => {\n        const stateToChange = { ...plant };\n        stateToChange[evt.target.id] = evt.target.value;\n        setPlant(stateToChange);\n    };\n    const getMoods = () => {\n        return PlantManager.getAll(\"moods\").then(moodsfromAPI => {\n            setMoods(moodsfromAPI)\n        })\n    };\n    const getSunlightLevels = () => {\n        return PlantManager.getAll(\"sunlightLevels\").then(sunlightLevelsfromAPI => {\n            setSunlightLevels(sunlightLevelsfromAPI)\n        })\n    };\n    const getWaterLevels = () => {\n        return PlantManager.getAll(\"waterLevels\").then(waterLevelsfromAPI => {\n            setWaterLevels(waterLevelsfromAPI)\n        })\n    };\n\n\n\n\n\n    const updateExistingPlant = evt => {\n        evt.preventDefault()\n        setIsLoading(true);\n\n        //Created an easy tag to post to the return edit card.... for showing chats when they are edited     \n        //const MessageChanged = \"(~Edited Since~)\"\n        plant.moodId = parseInt(plant.moodId)\n        plant.sunlightLevelId = parseInt(plant.sunlightLevelId)\n        plant.waterLevelId = parseInt(plant.waterLevelId)\n        // This is an edit, so we need the id\n        const editedPlant = {\n            userId: plant.userId,\n            id: props.match.params.plantId,\n            nickName: plant.nickName,\n            vernacularName: plant.vernacularName,\n            entryDate: plant.entryDate,\n            indoorOutdoor: plant.indoorOutdoor,\n            moodId: plant.moodId,\n            sunlightLevelId: plant.sunlightLevelId,\n            waterLevelId: plant.waterLevelId,\n            isDead: false\n\n        };\n        PlantManager.updatePlant(editedPlant)\n            .then(() => props.history.go(-1))\n            .then(() => props.history.go(false))\n        //.then(() => window.location.reload(false))\n    }\n\n    useEffect(() => {\n        PlantManager.getPlant(props.match.params.plantId)\n            .then(plant => {\n                setPlant(plant);\n                getMoods();\n                getSunlightLevels();\n                getWaterLevels();\n                setIsLoading(false);\n            });\n    }, [props.match.params.plantId]);\n    //Filling the dependency array allows the change made to rerender the Animal\n\n\n    return (\n\n        <>\n            {/* FORMS SECTION CREATED USING MATERILIZE */}\n            <div className=\"row\">\n                <div className=\"col s12 m5\">\n                    <div className=\"card-panel transparent\">\n                        <div className=\"row\">\n                            <form className=\"col s12\">\n                                <div className=\"formgrid\">\n                                    <input\n                                        type=\"hidden\"\n                                        required\n                                        className=\"form-control\"\n                                        onChange={handleFieldChange}\n                                        id=\"userId\"\n                                        value={plant.userId}\n                                    />\n                                    <div className=\"row\">\n                                        <div className=\"input-field col s6\">\n                                            Vernacular Name:\n            <input placeholder=\"Enter in your plants English common name:\" id=\"vernacularName\" type=\"text\" required\n                                                onChange={handleFieldChange} className=\"validate\" value={plant.vernacularName}></input>\n                                            <label for=\"vernacularName\"></label>\n                                        </div>\n                                        <div className=\"input-field col s6\">\n                                            Plants NickName:\n          <input placeholder=\"What would you like to call your plant?\" id=\"nickName\" type=\"text\" required\n                                                onChange={handleFieldChange} class=\"validate\" value={plant.nickName}  ></input>\n                                            <label for=\"nickName\"></label>\n                                        </div>\n                                    </div>\n                                    <div className=\"row\">\n                                        <div className=\"input-field col s12\">\n                                            Does your plant like an indoor enviorment or outdoor enviorment...or both?:\n          <div className=\"input-field inline\">\n                                                <input placeholder=\"Indoor/Outdoor?\" id=\"indoorOutdoor\" type=\"text\" required\n                                                    onChange={handleFieldChange} className=\"validate\" value={plant.indoorOutdoor}></input>\n                                                <label for=\"age\"></label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    {/* MATERILIZE FORM END */}\n                                    {/* DROPDOWN MENU FORM USING REACTSTRAP/BOOTSTRAP */}\n                                    <div className=\"kk\">\n                                        <Form.Group controlId=\"moodId\">\n                                            <Form.Label>Plant Mood:</Form.Label>\n\n                                            <Form.Control as=\"select\" className=\"moodForm\"\n                                                value={parseInt(plant.moodId)} id=\"moodId\" required\n                                                onChange={handleFieldChange}  >\n                                                {moods.map(mood =>\n                                                    <option key={mood.id} value={parseInt(mood.id)}>{mood.level}</option>)}\n                                            </Form.Control>\n                                        </Form.Group>\n                                    </div>\n                                    <div className=\"kk\">\n                                        <Form.Group controlId=\"sunlightLevelId\">\n                                            <Form.Label>Sunlight Level:</Form.Label>\n                                            <Form.Control as=\"select\" className=\"sunlightLevelForm\"\n                                                value={parseInt(plant.sunlightLevelId)} id=\"sunlightLevelId\" required\n                                                onChange={handleFieldChange}  >\n                                                {sunlightLevels.map(sunlightLevel =>\n                                                    <option key={sunlightLevel.id} value={parseInt(sunlightLevel.id)}>{sunlightLevel.level}</option>)}\n                                            </Form.Control>\n                                        </Form.Group>\n                                    </div>\n                                    <div className=\"kk\">\n                                        <Form.Group controlId=\"waterLevelId\">\n                                            <Form.Label>Water Level:</Form.Label>\n                                            <Form.Control as=\"select\" className=\"waterLevelForm\"\n                                                value={parseInt(plant.waterLevelId)} id=\"waterLevelId\" required\n                                                onChange={handleFieldChange}  >\n                                                {waterLevels.map(waterLevel =>\n                                                    <option key={waterLevel.id} value={parseInt(waterLevel.id)}>{waterLevel.level}</option>)}\n                                            </Form.Control>\n                                        </Form.Group>\n                                    </div>\n\n                                </div>\n                                <div className=\"alignRight\">\n                                    <button\n                                        className=\"waves-effect waves-light btn\"\n                                        type=\"button\"\n                                        disabled={isLoading}\n                                        onClick={updateExistingPlant}\n                                    >Submit</button>\n                                </div>\n\n                            </form>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {/* END DROPDOWN MENU FORM USING REACTSTRAP/BOOTSTRAP */}\n        </>\n    );\n}\n\nexport default PlantEditForm;","import React, { useState, useEffect } from 'react';\nimport PlantManager from '../../modules/PlantManager';\n\n\n\n//Method for Creating Time Stamp in readeable form(mdn docs)...\nlet timeStamp = new Intl.DateTimeFormat(\"en\", {\n    timeStyle: \"medium\",\n    dateStyle: \"short\"\n});\n\nconst PlantJournalForm = props => {\n    const [journal, setJournal] = useState({ plantId: props.plantId, entryDate: timeStamp.format(Date.now()), journalEntry: \"\", journalTitle: \"\" });\n    const [plants, setPlants] = useState([])\n    const [isLoading, setIsLoading] = useState(false);\n\n    //Tracks entries into text boxes\n    const handleFieldChange = evt => {\n        const stateToChange = { ...journal };\n        stateToChange[evt.target.id] = evt.target.value;\n        setJournal(stateToChange);\n    };\n\n\n\n\n    const currentUserId = sessionStorage.getItem(\"activeUser\")\n    journal.userId = parseInt(currentUserId)\n\n\n\n\n    const constructNewJournalEntry = evt => {\n        evt.preventDefault();\n        if (journal.journalEntry === \"\" || journal.journalTitle === \"\") {\n            window.alert(\"Please fill out all the entry requirements....\");\n        } else {\n            setIsLoading(true);\n            journal.plantId = parseInt(journal.plantId)\n            PlantManager.postJournal(journal)\n                //.then(() => PlantManager.getAll(plants))\n                .then(() => props.history.push(\"/home\"));\n        }\n    };\n\n\n    const getPlants = () => {\n        return PlantManager.getAll(\"plants\").then(plantsFromAPI => {\n            setPlants(plantsFromAPI)\n        });\n    }\n\n    useEffect(() => {\n        getPlants()\n    }, []);\n\n\n\n\n\n    return (\n        <>\n\n            <div className=\"row\">\n                <div className=\"col s12 m5\">\n                    <div className=\"card-panel transparent\">\n                        <div className=\"row\">\n                            <form className=\"col s12\">\n                                <input\n                                    type=\"hidden\"\n                                    required\n                                    className=\"form-control\"\n                                    onChange={handleFieldChange}\n                                    id='plantId'\n                                    value={plants.plantId}\n                                />\n\n                                <div className=\"input-field col s5\">\n                                    Title of the Entry:\n                <input placeholder=\"Give your Journal entry a memorable title...\" id=\"journalTitle\" type=\"text\" data-length=\"10\" required\n                                        onChange={handleFieldChange} className=\"validate\"></input>\n                                    <label for=\"journalTitleform\"></label>\n                                </div>\n                                <div className=\"input-field col s8\">\n                                    Plant Journal Entry:\n                <input placeholder=\"Talk about the status of your plant, your plans for next season, repotting methods, etc:\" id=\"journalEntry\" className=\"materialize-textarea\" required\n                                        onChange={handleFieldChange} className=\"validate\"></input>\n                                    <label for=\"journalEntryform\"></label>\n                                    <div >\n                                        <button\n                                            className=\"waves-effect waves-light btn\"\n                                            type=\"button\"\n                                            disabled={isLoading}\n                                            onClick={constructNewJournalEntry}\n                                        >Submit</button>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default PlantJournalForm;","import React, { useState, useEffect } from 'react';\nimport PlantManager from '../../modules/PlantManager';\nimport { CardDeck, Card, Col } from 'react-bootstrap';\n\n\n//Method for Creating Time Stamp in readeable form(mdn docs)...\nlet timeStamp = new Intl.DateTimeFormat(\"en\", {\n  timeStyle: \"medium\",\n  dateStyle: \"short\"\n});\n\n\nconst PlantDetail = props => {\n  const [journal, setJournal] = useState({ plantId: 0, id: 0, entryDate: timeStamp.format(Date.now()), journalEntry: \"\", journalTitle: \"\" });\n  const [isLoading, setIsLoading] = useState(true);\n  //console.log(\"yeejournals\", journal)\n\n\n  //Important Lesson learned below: if your gonna set the state.....dont pinpoint the property inside the \"expandedPlant\"\n  //...it turns out that React cant pinpoint cause your nesting too deep. Rather pass the object and then set directions in the return.\n\n  const expandedJournal = () => {\n    PlantManager.getWithSpecificPlants(props.journalId)\n      .then(journal => {\n        //console.log(\"yeettttt2\", journal)\n        setJournal(journal)\n      }\n      )\n  }\n\n\n  useEffect(() => {\n    expandedJournal()\n    setIsLoading(false);\n  }, [props.journalId]);\n\n\n\n\n  const handleDelete = () => {\n    //invoke the delete function  and re-direct to the  list.\n    setIsLoading(true);\n    PlantManager.deleteJournal(props.journalId).then(() =>\n      props.history.push(\"/home\")\n    );\n  };\n\n\n  //Currently the CSS lies in plantCard.css...\n\n  return (\n\n    <>\n\n\n      <CardDeck style={{\n        float: \"center\", padding: 0, display: \"inline\", justifycontent: \"center\",\n        fontFamily: 'sans-serif', display: \"center\"\n      }}>\n        <Card border=\"primary\" style={{\n          float: \"center\", width: \"50%\", margin: 100,\n          fontFamily: 'sans-serif', display: \"flex\"\n        }}>\n\n          <Card.Body  >\n            <Card.Title style={{ width: '80%', color: \"black\" }}>\n              Journal Recorded on: <small>{journal.entryDate}</small>\n              <br />\n              <br />\n            Entry Title: \"{journal.journalTitle}\"<br /></Card.Title>\n\n            <br />\n            <Card.Text>\n              <br />\n              <h4>Entry: </h4><p>{journal.journalEntry}</p>\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small className=\"text-muted\"> <p><button className=\"waves-effect waves-light btn\" type=\"button\" disabled={isLoading} onClick={handleDelete}>DELETE</button>\n              <button className=\"waves-effect waves-light btn\" type=\"button\" onClick={() => props.history.push(`/journals/${journal.id}/edit`)}>Edit</button></p>\n            </small>\n          </Card.Footer>\n        </Card>\n        <br />\n      </CardDeck>\n\n\n    </>\n\n\n  )\n}\n\nexport default PlantDetail;\n\n","import React, { useState, useEffect } from \"react\"\nimport PlantManager from \"../../modules/PlantManager\"\nimport './css-java-extension/materialize.css';\nimport './css-java-extension/materialize.min.css';\n\n\n\nlet timeStamp = new Intl.DateTimeFormat(\"en\", {\n    timeStyle: \"medium\",\n    dateStyle: \"short\"\n});\n\n\nconst PlantJournalEditForm = props => {\n    const [journal, setJournal] = useState({ plantId: 0, id: 0, entryDate: timeStamp.format(Date.now()), journalEntry: \"\", journalTitle: \"\" });\n    const [isLoading, setIsLoading] = useState(false);\n\n\n\n    const handleFieldChange = evt => {\n        const stateToChange = { ...journal };\n        stateToChange[evt.target.id] = evt.target.value;\n        setJournal(stateToChange);\n    };\n\n\n    const updateExistingJournal = evt => {\n        evt.preventDefault()\n        setIsLoading(true);\n\n        //Created an easy tag to post to the return edit card.... for showing chats when they are edited     \n        // const MessageChanged = \"(~Edited Since~)\"\n        const editedJournal = {\n            userId: journal.userId,\n            plantId: journal.plantId,\n            id: props.match.params.journalId,\n            entryDate: journal.EntryDate,\n            journalEntry: journal.journalEntry,\n            journalTitle: journal.journalTitle\n        };\n\n        PlantManager.update(editedJournal)\n            .then(() => props.history.push(\"/home\"))\n    }\n\n    useEffect(() => {\n        PlantManager.getJournal(props.match.params.journalId)\n            .then(journal => {\n                setJournal(journal);\n                setIsLoading(false);\n            });\n    }, [props.match.params.journalId]);\n    //Filling the dependency array allows the change made to rerender the Journal\n\n\n    return (\n        <>\n\n            <div className=\"extraPaddingJournalEdit\">\n                <form className=\"col s12\">\n                    <div className=\"formgrid\">\n                        <input\n                            type=\"hidden\"\n                            required\n                            className=\"form-control\"\n                            onChange={handleFieldChange}\n                            id=\"userId\"\n                            value={journal.userId}\n                        />\n                        <div className=\"input-field col s5\">\n                            Title of the Entry:\n                        <input placeholder=\"Give your Journal entry a memorable title...\" id=\"journalTitle\" type=\"text\" data-length=\"10\" required\n                                onChange={handleFieldChange} className=\"validate\" value={journal.journalTitle}></input>\n                            <label for=\"journalEntry\"></label>\n                        </div>\n                        <div className=\"input-field col s8\">\n                            Plant Journal Entry:\n                        <input placeholder=\"Talk about the status of your plant, your plans for next season, repotting methods, etc:\" id=\"journalEntry\" className=\"materialize-textarea\" required\n                                onChange={handleFieldChange} className=\"validate\" value={journal.journalEntry}></input>\n                            <label for=\"journalEntry\"></label>\n                        </div>\n                        <div className=\"alignRight\">\n                            <button\n                                className=\"waves-effect waves-light btn\"\n                                type=\"button\"\n                                disabled={isLoading}\n                                onClick={updateExistingJournal}\n                            >Submit Changes</button>\n                        </div></div>\n                </form>\n            </div>\n\n        </>\n    );\n}\n\nexport default PlantJournalEditForm;","import React, { useState, useEffect } from 'react';\nimport ImageManager from '../../modules/ImageManager';\n\n\n\n//Method for Creating Time Stamp in readeable form(mdn docs)...\nlet timeStamp = new Intl.DateTimeFormat(\"en\", {\n    timeStyle: \"medium\",\n    dateStyle: \"short\"\n});\n\nconst ImageForm = props => {\n    const [image, setImage] = useState({ plantId: props.plantId, entryDate: timeStamp.format(Date.now()), imageTitle: \"\", url: \"\" });\n    const [importImage, setImportImage] = useState(\"\")\n    const [plants, setPlants] = useState([])\n    const [isLoading, setIsLoading] = useState(false);\n\n    //Tracks entries into text boxes\n    const handleFieldChange = evt => {\n        const stateToChange = { ...image };\n        stateToChange[evt.target.id] = evt.target.value;\n        setImage(stateToChange);\n    };\n\n\n\n    const importTheImage = async evt => {\n        const files = evt.target.files\n        const formData = new FormData()\n        formData.append('file', files[0])\n        formData.append('upload_preset', \"CapstoneSumms\")\n        setIsLoading(true)\n        const res = await fetch(\n            'https://api.cloudinary.com/v1_1/triggsumms/image/upload',\n            {\n                method: 'POST',\n                body: formData\n            }\n        )\n        const file = await res.json()\n        // this will save your photo\n        setImportImage(file.secure_url)\n        setImage({ ...image, url: file.secure_url })\n        ImageManager.getAllImages('images')\n        setIsLoading(false)\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    const currentUserId = sessionStorage.getItem(\"activeUser\")\n    image.userId = parseInt(currentUserId)\n\n\n\n\n    const constructNewImage = evt => {\n        evt.preventDefault();\n        if (image.imageTitle === \"\") {\n            window.alert(\"Please fill out all the entry requirements....\");\n        } else {\n            setIsLoading(true);\n            image.plantId = parseInt(image.plantId)\n            ImageManager.post(image)\n                //.then(() => PlantManager.getAll(plants))\n                .then(() => props.history.push(\"/home\"));\n        }\n    };\n\n\n\n\n\n    /* const getTheImages = () => {\n            return ImageManager.getAllImages(\"images\").then(imagesFromAPI => {\n                imagesFromAPI.sort((x, y) => {\n                    let a = new Date(x.entryDate),\n                      b = new Date(y.entryDate);\n                    return a - b;\n               });     \n                setImage(imagesFromAPI)\n            }); \n        }  */\n\n\n\n    useEffect(() => {\n        // getTheImages()\n    }, []);\n\n\n\n\n\n\n    return (\n        <>\n\n            <div className=\"row\">\n                <div className=\"col s12 m5\">\n                    <div className=\"card-panel transparent\">\n                        <div className=\"row\">\n                            <div >\n                                <button\n                                    className=\"waves-effect waves-light btn\"\n                                    type=\"button\"\n                                    disabled={isLoading}\n                                    onClick={constructNewImage}\n                                >Submit</button>\n                            </div>\n                            <input type=\"file\" lassName=\"waves-effect waves-light btn\" name=\"file\" id=\"file\" onChange={importTheImage} placeholder=\"upload\" />\n\n                            <form className=\"col s12\">\n                                <input\n                                    type=\"hidden\"\n                                    required\n                                    className=\"form-control\"\n                                    onChange={handleFieldChange}\n                                    id='plantId'\n                                    value={plants.plantId}\n                                />\n\n                                <div className=\"input-field col s5\">\n                                    Title of the Image:\n                <input placeholder=\"Give your image a memorable title...\" id=\"imageTitle\" type=\"text\" data-length=\"10\" required\n                                        onChange={handleFieldChange} className=\"validate\"></input>\n                                    <label for=\"imageTitleform\"></label>\n                                </div>\n\n\n                            </form>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default ImageForm;","import { Route, Redirect } from \"react-router-dom\";\nimport React from \"react\";\nimport Home from \"./home/Home\";\nimport GraveYard from \"./home/GraveYard\"\nimport { CustomLogin } from \"./auth/CustomLogin.jsx\"\nimport UserList from \"./auth/UserList\"\nimport UserEditForm from \"./auth/UserEditForm\"\nimport PlantList from \"./plant/PlantList\";\nimport PlantForm from \"./plant/PlantForm\";\nimport PlantDetail from \"./plant/PlantDetail\";\nimport PlantEditForm from \"./plant/PlantEditForm\";\nimport PlantJournalForm from \"./plant/PlantJournalForm\"\nimport PlantJournalDetail from \"./plant/PlantJournalDetail\"\nimport PlantGraveYardList from \"./plant/PlantGraveYardList\"\nimport PlantJournalEditForm from \"./plant/PlantJournalEditForm\"\nimport ImageForm from \"./plant/ImageForm\"\n\n\n\n\nconst ApplicationViews = (props) => {\n  const hasUser = props.hasUser;\n  const setUser = props.setUser;\n  return (\n\n\n    <React.Fragment>\n      <Route\n        exact\n        path=\"/home\"\n        render={(props) => {\n          return <Home {...props} />;\n        }} />\n\n      {/*LOGIN Routes START  ************************************************************************************************************************/}\n      {/* //pass the `setUser` function to Login component. */}\n      <Route path=\"/login\" render={props => {\n        return <CustomLogin setUser={setUser} {...props} />\n      }} />\n\n\n\n\n      {/* USER Routes START  ************************************************************************************************************************/}\n      <Route\n        path=\"/userListz\"\n        render={props => {\n          return <UserList {...props} />\n        }} />\n\n      <Route\n        path=\"/users/:userId(\\d+)/edit\"\n        render={props => {\n          if (hasUser) {\n            return <UserEditForm {...props} />\n          } else {\n            return <Redirect to=\"/home\" />\n          }\n        }} />\n\n      {/*END USER INFO  */}\n\n\n\n\n      {/*DEADPlant Routes START  ************************************************************************************************************************/}\n      <Route\n        exact\n        path=\"/DeadPlants\"\n        render={(props) => {\n          return <GraveYard {...props} />;\n        }} />\n\n      <Route\n\n        path=\"/DeadPlantListz\"\n        render={props => {\n          if (hasUser) {\n            return <PlantGraveYardList\n              plantId={parseInt(props.match.params.plantId)}\n              {...props} />\n          } else {\n            return <Redirect to=\"/login\" />\n          }\n        }}\n      />\n\n\n\n\n\n\n\n      <Route path=\"/plants/:plantId(\\d+)/newimage\"\n\n        render={(props) => {\n          return <ImageForm\n            plantId={parseInt(props.match.params.plantId)}\n            {...props} />\n        }} />\n\n\n\n\n\n\n\n\n\n      {/*Plant Routes START  ************************************************************************************************************************/}\n      <Route\n        path=\"/plants/new\"\n        render={(props) => {\n          return <PlantForm {...props} />\n        }} />\n\n      <Route path=\"/plants/:plantId(\\d+)\" render={(props) => {\n        if (hasUser) {\n          return <PlantDetail\n            plantId={parseInt(props.match.params.plantId)}\n            {...props} />\n\n        } else {\n          return <Redirect to=\"/login\" />\n\n        }\n      }} />\n\n      <Route\n        exact\n        path=\"/plants/:plantId(\\d+)/edit\"\n        render={props => {\n          if (hasUser) {\n            return <PlantEditForm {...props}\n            />\n          }\n          else {\n            return <Redirect to=\"/home\" />\n          }\n        }} />\n\n      <Route\n        exact\n        path=\"/plantListz\"\n        render={props => {\n          if (hasUser) {\n            return <PlantList {...props} />;//Home here is a placeholder value. \n\n          } else {\n            return <Redirect to=\"/login\" />\n          }\n        }} />\n\n\n      {/*Plant Routes End  */}\n\n\n\n      {/*Journal Routes START  *********************************************************************************************************************/}\n      <Route path=\"/plants/:plantId(\\d+)/newjournal\"\n\n        render={(props) => {\n          return <PlantJournalForm\n            plantId={parseInt(props.match.params.plantId)}\n            {...props} />\n        }} />\n\n\n      <Route path=\"/journals/:journalId(\\d+)\" render={(props) => {\n        if (hasUser) {\n          return <PlantJournalDetail\n            journalId={parseInt(props.match.params.journalId)}\n            {...props} />\n\n        } else {\n          return <Redirect to=\"/login\" />\n\n        }\n      }} />\n      <Route\n        exact\n        path=\"/journals/:journalId(\\d+)/edit\"\n        render={props => {\n          if (hasUser) {\n            return <PlantJournalEditForm {...props}\n            />\n          }\n          else {\n            return <Redirect to=\"/home\" />\n          }\n        }} />\n    </React.Fragment>\n  );\n}\nexport default ApplicationViews;","import React, { useState } from 'react';\nimport NavBar from './components/nav/NavBar';\nimport ApplicationViews from \"./components/ApplicationViews\"\nimport \"./PlantBaby.css\"\n\n\n\nconst PlantBaby = () => {\n  const isAuthenticated = () => sessionStorage.getItem(\"credentials\") !== null;\n\n  //hasUser makes sure the crendentials has a value\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n\n  //Used to refresh in after login in Login.js\n  const setUser = user => {\n    setHasUser(isAuthenticated());\n  };\n\n  //Logout function located in Navbar\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  }\n\n\n\n  return (\n    <>\n\n      <NavBar hasUser={hasUser} clearUser={clearUser} />\n\n      <ApplicationViews hasUser={hasUser} setUser={setUser} />\n\n    </>\n  );\n}\n\n\nexport default PlantBaby;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './index.css';\nimport PlantBaby from './PlantBaby';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <Router>\n    <div className=\"backgroundzforIndex\">\n      <PlantBaby />\n    </div>\n  </Router>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}